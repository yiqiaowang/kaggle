{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":" NN Trial","version":"0.3.2","views":{},"default_view":{},"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"metadata":{"id":"eR7jZbTh3h4-","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["!pip3 install http://download.pytorch.org/whl/cu80/torch-0.3.1-cp35-cp35m-linux_x86_64.whl\n","!pip3 install torchvision"],"execution_count":0,"outputs":[]},{"metadata":{"id":"G4AF2DwX2ncC","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"output_extras":[{"item_id":1}],"base_uri":"https://localhost:8080/","height":369},"outputId":"4907e8eb-f020-44d8-dd46-6f4967c4da40","executionInfo":{"status":"error","timestamp":1520885928511,"user_tz":240,"elapsed":476,"user":{"displayName":"Yi Qiao Wang","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s128","userId":"117770953154591147543"}}},"cell_type":"code","source":["import torch\n","\n","\"\"\"\n","A fully-connected ReLU network with one hidden layer and no biases, trained to\n","predict y from x by minimizing squared Euclidean distance.\n","This implementation uses PyTorch tensors to manually compute the forward pass,\n","loss, and backward pass.\n","A PyTorch Tensor is basically the same as a numpy array: it does not know\n","anything about deep learning or computational graphs or gradients, and is just\n","a generic n-dimensional array to be used for arbitrary numeric computation.\n","The biggest difference between a numpy array and a PyTorch Tensor is that\n","a PyTorch Tensor can run on either CPU or GPU. To run operations on the GPU,\n","just cast the Tensor to a cuda datatype.\n","\"\"\"\n","\n","dtype = torch.FloatTensor\n","# dtype = torch.cuda.FloatTensor # Uncomment this to run on GPU\n","\n","# N is batch size; D_in is input dimension;\n","# H is hidden dimension; D_out is output dimension.\n","N, D_in, H, D_out = 64, 1000, 100, 10\n","\n","# Create random input and output data\n","x = torch.randn(N, D_in).type(dtype)\n","y = torch.randn(N, D_out).type(dtype)\n","\n","# Randomly initialize weights\n","w1 = torch.randn(D_in, H).type(dtype)\n","w2 = torch.randn(H, D_out).type(dtype)\n","\n","learning_rate = 1e-6\n","for t in range(500):\n","  # Forward pass: compute predicted y\n","  h = x.mm(w1)\n","  h_relu = h.clamp(min=0)\n","  y_pred = h_relu.mm(w2)\n","\n","  # Compute and print loss\n","  loss = (y_pred - y).pow(2).sum()\n","  print(t, loss)\n","\n","  # Backprop to compute gradients of w1 and w2 with respect to loss\n","  grad_y_pred = 2.0 * (y_pred - y)\n","  grad_w2 = h_relu.t().mm(grad_y_pred)\n","  grad_h_relu = grad_y_pred.mm(w2.t())\n","  grad_h = grad_h_relu.clone()\n","  grad_h[h < 0] = 0\n","  grad_w1 = x.t().mm(grad_h)\n","\n","  # Update weights using gradient descent\n","  w1 -= learning_rate * grad_w1\n","w2 -= learning_rate * grad_w2"],"execution_count":1,"outputs":[{"output_type":"error","ename":"ModuleNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-faa396a233dd>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \"\"\"\n\u001b[1;32m      4\u001b[0m \u001b[0mA\u001b[0m \u001b[0mfully\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0mconnected\u001b[0m \u001b[0mReLU\u001b[0m \u001b[0mnetwork\u001b[0m \u001b[0;32mwith\u001b[0m \u001b[0mone\u001b[0m \u001b[0mhidden\u001b[0m \u001b[0mlayer\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mno\u001b[0m \u001b[0mbiases\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrained\u001b[0m \u001b[0mto\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mpredict\u001b[0m \u001b[0my\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mx\u001b[0m \u001b[0mby\u001b[0m \u001b[0mminimizing\u001b[0m \u001b[0msquared\u001b[0m \u001b[0mEuclidean\u001b[0m \u001b[0mdistance\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'torch'","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo install torch, click the button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"]}]}]}